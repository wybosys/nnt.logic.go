#!/usr/bin/env python3

import os
import shutil
import subprocess
import sys
import platform
import re

is_cygwin = platform.system().startswith('CYGWIN')
is_windows = is_cygwin or platform.system() == 'Windows'
GOPATH_DELIMITER = ';' if is_windows else ':'


def safepath(str):
    if is_cygwin:
        res = re.compile('/cygdrive/([a-z]{0,2})/(.+)').findall(str)
        if not res:
            print('%s 不是有效的相对windows的目录' % str)
        else:
            str = '%s:/%s' % res[0]
    return str


# 框架约定GOPATH指向src/libs
PROJECT_HOME = safepath(os.path.abspath(os.path.dirname(sys.argv[0])))
GOPATH = GOPATH_DELIMITER.join([
    PROJECT_HOME + '/libs',
    PROJECT_HOME + '/',
])
os.environ['GOPATH'] = GOPATH


def install_package(name):
    """安装模块"""
    print('安装模块 ' + name)
    os.system('go get -v ' + sys.argv[2])
    # 移除get时产生的.git
    shutil.rmtree('libs/src/' + sys.argv[2] + '/.git')


def build(debug=False):
    """普通编译"""
    cmds = ['go build -v']
    if debug:
        cmds.append('-gcflags "all=-N -l"')
    cmds.append('-o app')
    exp = ' '.join(cmds)
    # print(exp)
    code, output = subprocess.getstatusoutput(exp)
    print(output)


def debug():
    """启动调试器"""
    exp = 'dlv --listen=:2345 --headless=true --api-version=2 --accept-multiclient exec ./app -- --debug'
    os.system(exp)


if __name__ == "__main__":
    if 'get' in sys.argv:
        install_package(sys.argv[2])
    elif 'debug' in sys.argv:
        build(True)
        debug()
    else:
        build()
